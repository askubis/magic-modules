
userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
if err != nil {
return err
}

obj := make(map[string]interface{})
nameProp, err := expandNestedComputePerInstanceConfigName(d.Get("name"), d, config)
if err != nil {
return err
} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
obj["name"] = nameProp
}
preservedStateProp, err := expandNestedComputePerInstanceConfigPreservedState(d.Get("preserved_state"), d, config)
if err != nil {
return err
} else if v, ok := d.GetOkExists("preserved_state"); !tpgresource.IsEmptyValue(reflect.ValueOf(preservedStateProp)) && (ok || !reflect.DeepEqual(v, preservedStateProp)) {
obj["preservedState"] = preservedStateProp
}

if d.Get("use_existing_instance").(bool) {
  obj, err = resourceComputePerInstanceConfigUpdateEncoder(d, meta, obj)
} else {
  obj, err = resourceComputePerInstanceConfigEncoder(d, meta, obj)
}
if err != nil {
return err
}

lockName, err := tpgresource.ReplaceVars(d, config, "instanceGroupManager/{{project}}/{{zone}}/{{instance_group_manager}}")
if err != nil {
return err
}
transport_tpg.MutexStore.Lock(lockName)
defer transport_tpg.MutexStore.Unlock(lockName)

log.Printf("[DEBUG] aaaaskubis use_existing_instances: %s", d.Get("use_existing_instance").(bool))
var url string
if d.Get("use_existing_instance").(bool) {
url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/zones/{{zone}}/instanceGroupManagers/{{instance_group_manager}}/updatePerInstanceConfigs")
log.Printf("[DEBUG] aaaaskubis Changed url to: %s", url)
} else {
url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/zones/{{zone}}/instanceGroupManagers/{{instance_group_manager}}/createInstances")
}
if err != nil {
return err
}

log.Printf("[DEBUG] Creating new PerInstanceConfig: %#v", obj)
billingProject := ""

project, err := tpgresource.GetProject(d, config)
if err != nil {
return fmt.Errorf("Error fetching project for PerInstanceConfig: %s", err)
}
billingProject = project

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
billingProject = bp
}

res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
Config:    config,
Method:    "POST",
Project:   billingProject,
RawURL:    url,
UserAgent: userAgent,
Body:      obj,
Timeout:   d.Timeout(schema.TimeoutCreate),
})
if err != nil {
return fmt.Errorf("Error creating PerInstanceConfig: %s", err)
}

// Store the ID now
id, err := tpgresource.ReplaceVars(d, config, "{{project}}/{{zone}}/{{instance_group_manager}}/{{name}}")
if err != nil {
return fmt.Errorf("Error constructing id: %s", err)
}
d.SetId(id)

err = ComputeOperationWaitTime(
config, res, project, "Creating PerInstanceConfig", userAgent,
d.Timeout(schema.TimeoutCreate))

if err != nil {
// The resource didn't actually create
d.SetId("")
return fmt.Errorf("Error waiting to create PerInstanceConfig: %s", err)
}

log.Printf("[DEBUG] Finished creating PerInstanceConfig %q: %#v", d.Id(), res)

return resourceComputePerInstanceConfigRead(d, meta)